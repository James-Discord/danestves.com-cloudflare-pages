name: CI
on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Begin linting
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

  deploy:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        id: vercel-deployment
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-project-name: 'danestves'
    outputs:
      preview-url: ${{ steps.vercel-deployment.outputs.preview-url }}

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Run Lighthouse on urls and validate with lighthouserc
        uses: treosh/lighthouse-ci-action@v7
        with:
          urls: |
            ${{ needs.deploy.outputs.preview-url }}
          budgetPath: ./budget.json
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          runs: 3

  create_comment:
    runs-on: ubuntu-latest
    needs: lighthouse
    steps:
      - uses: actions/checkout@v2
      - name: Format lighthouse score
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = ${{ needs.lighthouse.outputs.manifest }}[0].summary
            console.log(result)
          # script: |
          #   const result = ${{ needs.lighthouse.outputs.manifest }}[0].summary
          #   const links = ${{ needs.lighthouse.outputs.links }}

          #   const formatResult = (res) => Math.round((res * 100))
          #   Object.keys(result).forEach(key => result[key] = formatResult(result[key]))

          #   const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'

          #   const comment = [
          #       `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
          #       '| Category | Score |',
          #       '| --- | --- |',
          #       `| ${score(result.performance)} Performance | ${result.performance} |`,
          #       `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
          #       `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
          #       `| ${score(result.seo)} SEO | ${result.seo} |`,
          #       `| ${score(result.pwa)} PWA | ${result.pwa} |`,
          #       ' ',
          #       `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
          #   ].join('\n')

          #   core.setOutput("comment", comment);

  comment_on_pr:
    runs-on: ubuntu-latest
    needs: create_comment
    steps:
      - uses: actions/checkout@v2
      - name: Comment lighthouse score on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ needs.create_comment.outputs.comment }}
